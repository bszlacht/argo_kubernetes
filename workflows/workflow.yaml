apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: cicd-template
  namespace: argo
  annotations:
    workflows.argoproj.io/description: |
      This workflow is implementing CICD for simple GO API. 
spec:
    entrypoint: main
    volumeClaimTemplates:
     - metadata:
         name: work
       spec:
         accessModes: [ ReadWriteOnce ]
         resources:
           requests:
             storage: 64Mi
    arguments:
      parameters:
        - name: commit-hash
          value: "main"
    templates:
     - name: main
       steps:
       - - name: build
           template: build-template
       - - name: test
           template: test-template
       - - name: integration-test
           template: integration-test-template
       - - name: docker-build
           template: docker-build-template
       - - name: deploy
           template: deploy-template
     - name: build-template
       container:
         volumeMounts:
           - mountPath: /go/src/github.com/go-api
             name: work
             subPath: src
           - mountPath: /go/pkg/mod
             name: work
             subPath: GOMODCACHE
           - mountPath: /root/.cache/go-build
             name: work
             subPath: GOCACHE
         image: golang:1.18
         workingDir: /go/src/github.com/go-api
         command: [ sh, -euxc ]
         args:
           - |
             git clone https://github.com/bszlacht/argo_kubernetes.git . && git checkout {{workflow.parameters.commit-hash}} && go mod download && make build
     - name: test-template
       container:
         image: golang:1.18
         volumeMounts:
           - mountPath: /go/src/github.com/go-api
             name: work
             subPath: src
           - mountPath: /go/pkg/mod
             name: work
             subPath: GOMODCACHE
           - mountPath: /root/.cache/go-build
             name: work
             subPath: GOCACHE
         workingDir: /go/src/github.com/go-api
         command: [ sh, -xuce ]
         args:
           - |
             make test
     - name: integration-test-template
       container:
         image: golang:1.18
         volumeMounts:
           - mountPath: /go/src/github.com/go-api
             name: work
             subPath: src
           - mountPath: /go/pkg/mod
             name: work
             subPath: GOMODCACHE
           - mountPath: /root/.cache/go-build
             name: work
             subPath: GOCACHE
         workingDir: /go/src/github.com/go-api
         command: [ sh, -xuce ]
         args:
           - |
             make test_integration
     - name: docker-build-template
       container:
         image: moby/buildkit:v0.9.3-rootless
         volumeMounts:
           - mountPath: /go/src/github.com/go-api
             name: work
             subPath: src
         workingDir: /go/src/github.com/go-api
         env:
           - name: BUILDKITD_FLAGS
             value: --oci-worker-no-process-sandbox
         command:
           - buildctl-daemonless.sh
         args:
           - build
           - --frontend
           - dockerfile.v0
           - --local
           - context=.
           - --local
           - dockerfile=docker/matrix/
           - --output
           - type=image,name=registry-service:5000/app-image,push=true,registry.insecure=true
         securityContext:
           privileged: true
     - name: deploy-template
       container:
         image: golang:1.18
         volumeMounts:
           - mountPath: /go/src/github.com/go-api
             name: work
             subPath: src
           - mountPath: /go/pkg/mod
             name: work
             subPath: GOMODCACHE
           - mountPath: /root/.cache/go-build
             name: work
             subPath: GOCACHE
         workingDir: /go/src/github.com/go-api
         command: [ sh, -xuce ]
         args:
           - |
             make run
